global !p
def junit(snip):
	if snip.opt("g:ultisnips_java_junit", "") == "3":
		snip += ""
	else:
		snip.rv += "@Test\n\t"

def nl(snip):
	if snip.opt("g:ultisnips_java_brace_style", "") == "nl":
		snip += ""
	else:
		snip.rv += " "
def getArgs(group):
	import re
	word = re.compile('[a-zA-Z0-9><.]+ \w+')
	return [i.split(" ") for i in word.findall(group) ]

def camel(word):
	if not word: return ''
	return word[0].upper() + word[1:]

def mixedCase(word):
	if not word: return ''
	return word[0].lower() + word[1:]

endglobal

snippet cl "create class" b
/**
 * ${1:<description>}
 *
 * @author Vitalie Mudrenco
 * @version `! date "+%d.%m.%Y"`
 */
public class ${2:`!p
snip.rv = snip.basename or "untitled"`} {
	$0
}
endsnippet

snippet cle "class extends" b
/**
 * ${1:<description>}
 *
 * @author Vitalie Mudrenco
 * @version `! date "+%d.%m.%Y"`
 */
public class ${2:`!p
snip.rv = snip.basename or "untitled"`} ${3:extends ${4:Parent} }${5:implements ${6:Interface} }{
	$0
}
endsnippet

snippet clc "class with constructor, fields, setter and getters" b
/**
 * ${1:<description>}
 *
 * @author Vitalie Mudrenco
 * @version `! date "+%d.%m.%Y"`
 */
public class `!p
snip.rv = snip.basename or "untitled"` {
`!p
args = getArgs(t[2])
if len(args) == 0: snip.rv = ""
for i in args:
	snip.rv += "\n\tprivate " + i[0] + " " + i[1]+ ";"
if len(args) > 0:
	snip.rv += "\n"`
	public `!p snip.rv = snip.basename or "unknown"`($2) {`!p
args = getArgs(t[2])
for i in args:
	snip.rv += "\n\t\tthis." + i[1] + " = " + i[1] + ";"
if len(args) == 0:
	snip.rv += "\n"`
	}$0
`!p
args = getArgs(t[2])
if len(args) == 0: snip.rv = ""
for i in args:
	snip.rv += "\n\tpublic void set" + camel(i[1]) + "(" + i[0] + " " + i[1] + ") {\n" + "\
	\tthis." + i[1] + " = " + i[1] + ";\n\t}\n"

	snip.rv += "\n\tpublic " + i[0] + " get" + camel(i[1]) + "() {\n\
	\treturn " + i[1] + ";\n\t}\n"
`
}
endsnippet

snippet clc "class with constructor, with field names" b
/**
 * ${1:<description>}
 *
 * @author Vitalie Mudrenco
 * @version `! date "+%d.%m.%Y"`
 */
public class `!p
snip.rv = snip.basename or "untitled"` {
`!p
args = getArgs(t[2])
for i in args:
	snip.rv += "\n\tprivate " + i[0] + " " + i[1]+ ";"
if len(args) > 0:
	snip.rv += "\n"`
	public `!p snip.rv = snip.basename or "unknown"`($2) {`!p
args = getArgs(t[2])
for i in args:
	snip.rv += "\n\t\tthis.%s = %s;" % (i[1], i[1])
if len(args) == 0:
	snip.rv += "\n"`
	}
}
endsnippet

snippet ex "class exception" b
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.ResponseStatus;

/**
 * ${1:<description>}
 *
 * @author Vitalie Mudrenco
 * @version `! date "+%d.%m.%Y"`
 */
@ResponseStatus(code = HttpStatus.${3:NOT_FOUND})
public class ${2:`!p
snip.rv = snip.basename or "untitled"`} extends ${3:RuntimeException} {
    public $2(${4:Long} ${5:param}) {
        super(String.format("$6", ${7:`!p snip.rv = t[5]`}));
    }$0
}
endsnippet


snippet ent "create entity" b
import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * ${1:<description>}
 *
 * @author Vitalie Mudrenco
 * @version `! date "+%d.%m.%Y"`
 */
@Data
@AllArgsConstructor
@NoArgsConstructor
@Entity
@Table(name = "${2:`!p import re
snip.rv = re.sub(r'(?<!^)(?=[A-Z])', '_', t[2]).lower()`}")
public class ${2:`!p 
snip.rv = snip.basename or "untitled"`} implements Serializable {
    private static final long serialVersionUID = 1L;

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Column(name = "id", nullable = false, insertable = false, updatable = false)
    private Long id;

	$0
}
endsnippet

snippet repo "create jpa repository" b
import org.springframework.data.jpa.repository.JpaRepository;

/**
 * ${1:<description>}
 *
 * @author Vitalie Mudrenco
 * @version `! date "+%d.%m.%Y"`
 */
public interface ${2:`!p 
snip.rv = snip.basename or "untitled"`} extends JpaRepository<${3:`!p snip.rv = t[2].replace("Repository", "")`}, Long> {
	$0
}
endsnippet

snippet enum "create enum" b
/**
 * ${1:<description>}
 *
 * @author Vitalie Mudrenco
 * @version `! date "+%d.%m.%Y"`
 */
@Getter
@AllArgsConstructor
public enum ${2:`!p snip.rv = snip.basename or "untitled"`} {
    ${3:VALUE}("$3")${4:;}$0

    private String value;
}
endsnippet

snippet f "field" b
${1:private} ${2:String} ${3:field};
endsnippet

snippet ff "final field" b
${1:private} final ${2:String} ${3:field};
endsnippet

snippet ffs "final static field" b
${1:private} static final ${2:String} ${3:field};
endsnippet

snippet col "Entity column" b
${6:@NotNull}
@Column(name = "${3:`!p import re
snip.rv = re.sub(r'(?<!^)(?=[A-Z])', '_', t[3]).lower()`}"${4:, nullable = ${5:false}})
${1:private} ${2:String} ${3:field};
endsnippet

snippet cn "Constructor" b
public `!p snip.rv = snip.basename or "untitled"`(${1:}) {
	$0
}
endsnippet

snippet cn "Constructor with fields" b
	`!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\tprivate " + i[0] + " " + i[1]+ ";"
if len(args) > 0:
	snip.rv += "\n"`
public `!p snip.rv = snip.basename or "unknown"`($1) {`!p
args = getArgs(t[1])
for i in args:
	snip.rv += "\n\t\tthis.%s = %s;" % (i[1], i[1])
if len(args) == 0:
	snip.rv += "\n"`
}
endsnippet

snippet main "create main method" b
public static void main(String[] args) {
	$0
}
endsnippet

snippet mt "method throws" b
${1:public} ${2:void} ${3:method}($4) ${5:throws $6 }{
	$0
}
endsnippet

snippet m  "method" b
${1:public} ${2:void} ${3:method}($4) {
	$0
}
endsnippet

snippet md "Method With javadoc" b
/**
 * ${7:Short Description}`!p
for i in getArgs(t[4]):
	snip.rv += "\n\t * @param " + i[1] + " usage..."`
 *`!p
if "throws" in t[5]:
	snip.rv = "\n\t * @throws " + t[6]
else:
	snip.rv = ""``!p
if not "void" in t[2]:
	snip.rv = "\n\t * @return object"
else:
	snip.rv = ""`
 **/
${1:public} ${2:void} ${3:method}($4) ${5:throws $6 }{
	$0
}
endsnippet

snippet imt "method throws" b
${1:void} ${2:method}($3) ${4:throws $5};$0
endsnippet

snippet im  "method" b
${1:void} ${2:method}($3);$0
endsnippet

snippet imd "Interface Method With javadoc" b
/**
 * ${6:Short Description}`!p
for i in getArgs(t[3]):
	snip.rv += "\n\t * @param " + i[1] + " usage..."`
 *`!p
if "throws" in t[4]:
	snip.rv = "\n\t * @throws " + t[5]
else:
	snip.rv = ""``!p
if not "void" in t[1]:
	snip.rv = "\n\t * @return object"
else:
	snip.rv = ""`
 **/
${1:void} ${2:method}($3) ${4:throws $5};$0
endsnippet

snippet /gett(er)?/ "getter" br
public ${1:String} get${2:Name}() {
	return `!p snip.rv = mixedCase(t[2])`;
}
endsnippet

snippet /sett(er)?/ "setter" br
public void set${1:Name}(${2:String} `!p snip.rv = mixedCase(t[1])`) {
	this.`!p snip.rv = mixedCase(t[1])` = `!p snip.rv = mixedCase(t[1])`;
}
endsnippet

snippet /se?tge?t|ge?tse?t|gs/ "setter and getter" br
public void set${1:Name}(${2:String} `!p snip.rv = mixedCase(t[1])`) {
	this.`!p snip.rv = mixedCase(t[1])` = `!p snip.rv = mixedCase(t[1])`;
}`!p snip.rv += "\n"`
public $2 get$1() {
	return `!p snip.rv = mixedCase(t[1])`;
}
endsnippet

snippet if "if statement" b
if ($1) {
	$0
}
endsnippet

snippet elif "else if"
else if ($1)`!p nl(snip)`{
	$0${VISUAL}
}
endsnippet

snippet el "else" w
else`!p nl(snip)`{
	$0${VISUAL}
}
endsnippet

snippet ifn "if null statement" b
if ($1 == null) {
	$0
}
endsnippet

snippet ifnn "if not null statement" b
if ($1 != null) {
	$0
}
endsnippet

snippet sw "switch statement" b
switch ($1) {
	case $2: $0
		break;
}
endsnippet

snippet br "break"
break;
endsnippet

snippet cs "case" b
case $1:
	$2
$0
endsnippet

snippet for "for" b
for ($1; $2; $3)`!p nl(snip)`{
	$0
}
endsnippet

snippet fori "for" b
for (int ${1:i} = 0; $1 < ${2:10}; $1++)`!p nl(snip)`{
	$0
}
endsnippet

snippet fore "for (each)" b
for ($1 : $2)`!p nl(snip)`{
	$0
}
endsnippet

snippet wh "while" b
while ($1)`!p nl(snip)`{
	$0
}
endsnippet

snippet cos "constant string" b
public static final String ${1:var} = "$2";$0
endsnippet

snippet co "constant" b
public static final ${1:String} ${2:var} = $3;$0
endsnippet

snippet in "interface" b
/**
 * ${1:<description>}
 *
 * @author Vitalie Mudrenco
 * @version `! date "+%d.%m.%Y"`
 */
interface ${2:`!p snip.rv = snip.basename or "untitled"`} ${3:extends ${4:Parent} }{
	$0
}
endsnippet

snippet cc "constructor call or setter body" b
this.${1:var} = $1;
endsnippet

snippet /List?|list/ "Collections List" br
List<${1:String}> ${2:list} = new ${3:Array}List<>();
endsnippet

snippet /Map?|map/ "Collections Map" br
Map<${1:String}, ${2:String}> ${3:map} = new ${4:Hash}Map<>();
endsnippet

snippet /Set?|set/ "Collections Set" br
Set<${1:String}> ${2:set} = new ${3:Hash}Set<>();
endsnippet

snippet /Str?|str/ "String" br
String $0
endsnippet

snippet pri "private" b
private $0
endsnippet

snippet pro "protected" b
protected $0
endsnippet

snippet pub "public" b
public $0
endsnippet

snippet ret "return" b
return $0
endsnippet

snippet st "static"
static $0
endsnippet

snippet try "try/catch" b
try {
	${VISUAL}$0
} catch(${1:Exception} ${2:e}){
	${3:e.printStackTrace();}
}
endsnippet

snippet sleep "try sleep catch" b
try {
	Thread.sleep(${1:1000});
} catch (InterruptedException e){
	e.printStackTrace();
}
endsnippet

snippet pa "package" b
package $0
endsnippet

snippet ser "Default serialVersionUID" b
private static final long serialVersionUID = 1L;
endsnippet

snippet p "print" b
System.out.print(${1:"$2"});$0
endsnippet

snippet pl "println"  b
System.out.println(${1:"$2"});$0
endsnippet

snippet todo "todo"  b
// TODO: 
endsnippet

snippet fixme "fixme"  b
// FIXME: 
endsnippet

